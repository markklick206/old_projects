exprs_data_TP_norm_filt <- exprs_data_TP_norm_filt[common_genes,]
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
NT_sft = pickSoftThreshold(exprs_data_NT_norm_filt, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(NT_sft$fitIndices[,1], -sign(NT_sft$fitIndices[,3])*NT_sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(NT_sft$fitIndices[,1], -sign(NT_sft$fitIndices[,3])*NT_sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(NT_sft$fitIndices[,1], NT_sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(NT_sft$fitIndices[,1], NT_sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
powers = c(c(1:10), seq(from = 12, to=20, by=2))
# Call the network topology analysis function
NT_sft = pickSoftThreshold(t(exprs_data_NT_norm_filt), powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(NT_sft$fitIndices[,1], -sign(NT_sft$fitIndices[,3])*NT_sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(NT_sft$fitIndices[,1], -sign(NT_sft$fitIndices[,3])*NT_sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(NT_sft$fitIndices[,1], NT_sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(NT_sft$fitIndices[,1], NT_sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
PT_sft = pickSoftThreshold(t(exprs_data_PT_norm_filt), powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(PT_sft$fitIndices[,1], -sign(PT_sft$fitIndices[,3])*PT_sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(PT_sft$fitIndices[,1], -sign(PT_sft$fitIndices[,3])*PT_sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(PT_sft$fitIndices[,1], PT_sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(PT_sft$fitIndices[,1], PT_sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
TP_sft = pickSoftThreshold(t(exprs_data_TP_norm_filt), powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(TP_sft$fitIndices[,1], -sign(TP_sft$fitIndices[,3])*TP_sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(TP_sft$fitIndices[,1], -sign(TP_sft$fitIndices[,3])*TP_sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(TP_sft$fitIndices[,1], TP_sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(TP_sft$fitIndices[,1], TP_sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
NT_softpower <- 12
TP_softpower <- 14
rankExpr_NT= rank(rowMeans(exprs_data_NT_norm_filt))
rankExpr_TP= rank(rowMeans(exprs_data_TP_norm_filt))
random5000= sample(common_genes,5000)
rankConn_NT= rank(softConnectivity(t(exprs_data_NT_norm_filt[random5000,]),type="signed",power=NT_softpower))
rankConn_TP= rank(softConnectivity(t(exprs_data_TP_norm_filt[random5000,]),type="signed",power=NT_softpower))
pdf("NT_vs_TP_generalNetworkProperties.pdf", height=10, width=9)
par(mfrow=c(2,1))
verboseScatterplot(rankExpr_NT,rankExpr_TP, xlab="Ranked Expression NT",
ylab="Ranked Expression TP")
verboseScatterplot(rankConn_NT,rankConn_TP, xlab="Ranked Connectivity NT",
ylab="Ranked Connectivity TP")
dev.off()
adjacency_NT = adjacency(t(exprs_data_NT_norm_filt),power=softPower,type="signed");
diag(adjacency_NT)=0
dissTOM_NT = 1-TOMsimilarity(adjacency_NT, TOMType="signed")
geneTree_NT = flashClust(as.dist(dissTOM_NT), method="average")
adjacency_TP = adjacency(t(exprs_data_TP_norm_filt),power=softPower,type="signed");
adjacency_NT = adjacency(t(exprs_data_NT_norm_filt),power=NT_softPower,type="signed");
diag(adjacency_NT)=0
dissTOM_NT = 1-TOMsimilarity(adjacency_NT, TOMType="signed")
geneTree_NT = flashClust(as.dist(dissTOM_NT), method="average")
adjacency_TP = adjacency(t(exprs_data_TP_norm_filt),power=NT_softPower,type="signed");
NT_softpower <- 12
TP_softpower <- 14
# run WGCNA!!!!!!
adjacency_NT = adjacency(t(exprs_data_NT_norm_filt),power=NT_softpower,type="signed");
diag(adjacency_NT)=0
dissTOM_NT = 1-TOMsimilarity(adjacency_NT, TOMType="signed")
plot(geneTree_NT,xlab="",sub="",main="Gene clustering on TOM-based dissimilarity NT",
labels=FALSE,hang=0.04);
library(WGCNA)
WGCNAnThreads()
enableWGCNAThreads(nThreads = 6)
adjacency_NT = adjacency(t(exprs_data_NT_norm_filt),power=NT_softpower,type="signed")
diag(adjacency_NT)=0
dissTOM_NT = 1-TOMsimilarity(adjacency_NT, TOMType="signed")
geneTree_NT = flashClust(as.dist(dissTOM_NT), method="average")
adjacency_TP = adjacency(t(exprs_data_TP_norm_filt),power=NT_softpower,type="signed")
diag(adjacency_TP)=0
dissTOM_TP = 1-TOMsimilarity(adjacency_TP, TOMType="signed")#10-15mins
geneTree_TP = flashClust(as.dist(dissTOM_TP), method="average")
pdf("NT_TP_dendrogram.pdf",height=6,width=16)
par(mfrow=c(1,2))
plot(geneTree_NT,xlab="",sub="",main="Gene clustering on TOM-based dissimilarity NT",
labels=FALSE,hang=0.04)
plot(geneTree_TP,xlab="",sub="",main="Gene clustering on TOM-based dissimilarity TP",
labels=FALSE,hang=0.04)
dev.off()
mColorh=NULL
for (ds in 0:3){
tree = cutreeHybrid(dendro = geneTree_NT, pamStage=FALSE,
minClusterSize = (30-3*ds), cutHeight = 0.99,
deepSplit = ds, distM = dissTOM_NT)
mColorh=cbind(mColorh,labels2colors(tree$labels));
}
pdf("Module_choices.pdf", height=10,width=25);
plotDendroAndColors(geneTree_NT, mColorh, paste("dpSplt =",0:3), main = "",dendroLabels=FALSE);
dev.off()
modules_NT = mColorh[,1] # (Chosen based on plot below)
nrow(exprs_data_TP_norm_filt)#genes
nrow(exprs_data_NT_norm_filt)#genes
ncol(exprs_data_NT_norm_filt)#samples
ncol(exprs_data_TP_norm_filt)#samples
modules_NT = mColorh[,4] # (Chosen based on plot below)
modules_NT = mColorh[,5] # (Chosen based on plot below)
modules_NT = mColorh[,4] # (Chosen based on plot below)
modules_NT = NT_mColorh[,4] # (Chosen based on plot below)
PCs1_NT = moduleEigengenes(t(exprs_data_NT_norm_filt), colors=modules_NT)
ME_1_NT = PCs1_NT$eigengenes
distPC1_NT = 1-abs(cor(ME_1_NT,use="p"))
distPC1_NT = ifelse(is.na(distPC1_NT), 0, distPC1_NT)
pcTree1_NT = hclust(as.dist(distPC1_NT),method="a")
MDS_1_NT = cmdscale(as.dist(distPC1_NT),2)
colors_NT = names(table(modules_NT))
pdf("NT_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_NT, xlab="",ylab="",main="",sub="")
plot(MDS_1_NT, col= colors_NT, main="MDS plot", cex=2, pch=19)
ordergenes = geneTree_NT$order
plot.mat(scale(log(exprs_data_NT_norm_filt[ordergenes,])) , rlabels= modules_NT[ordergenes], clabels=
colnames(exprs_data_NT_norm_filt), rcols=modules_NT[ordergenes])
for (which.module in names(table(modules_NT))){
ME = ME_1_NT[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
};
dev.off();
save.image("~/BMI567/FINAL WGCNA/THE_DATA_TCGA_BRCA_NT_vs_TP.RData")
pdf("Final_modules.pdf",height=8,width=12)
plotDendroAndColors(geneTree_NT, modules_NT, "Modules", dendroLabels=FALSE, hang=0.03, addGuide=TRUE,
guideHang=0.05, main="Gene dendrogram and module colors NT")
plotDendroAndColors(geneTree_TP, modules_NT, "Modules", dendroLabels=FALSE, hang=0.03, addGuide=TRUE,
guideHang=0.05, main="Gene dendrogram and module colors TP")
dev.off()
multiExpr = list(NT=list(data=t(exprs_data_NT_norm_filt)),TP=list(data=t(exprs_data_TP_norm_filt)))
multiColor = list(NT = modules_NT)
mp=modulePreservation(multiExpr,multiColor,referenceNetworks=1,verbose=3,networkType="signed",
nPermutations=30,maxGoldModuleSize=100,maxModuleSize=400)
stats = mp$preservation$Z$ref.NT$inColumnsAlsoPresentIn.TP
stats[order(-stats[,2]),c(1:2)]
# calculate KMEs (correlation btween each gene and ME) and use it to compare networks
geneModuleMembership1 = signedKME(t(exprs_data_NT_norm_filt), ME_1_NT)
colnames(geneModuleMembership1)=paste("PC",colors_NT,".cor",sep="");
MMPvalue1=corPvalueStudent(as.matrix(geneModuleMembership1),dim(exprs_data_NT_norm_filt)[[2]]);
colnames(MMPvalue1)=paste("PC",colors_NT,".pval",sep="");
Gene = rownames(exprs_data_NT_norm_filt)
kMEtable1 = cbind(Gene,Gene,modules_NT)
for (i in 1:length(colors_NT))
kMEtable1 = cbind(kMEtable1, geneModuleMembership1[,i], MMPvalue1[,i])
colnames(kMEtable1)=c("PSID","Gene","Module",sort(c(colnames(geneModuleMembership1),
colnames(MMPvalue1))))
write.csv(kMEtable1,"kMEtable1.csv",row.names=FALSE)
# First calculate MEs for A2, since we haven't done that yet
PCs2A = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_NT)
ME_2A = PCs2A$eigengenes
geneModuleMembership2 = signedKME(t(exprs_data_TP_norm_filt), ME_2A)
colnames(geneModuleMembership1)=paste("PC",colors_NT,".cor",sep="");
MMPvalue2=corPvalueStudent(as.matrix(geneModuleMembership2),dim(exprs_data_TP_norm_filt)[[2]]);
colnames(MMPvalue2)=paste("PC",colorsA1,".pval",sep="");
kMEtable2 = cbind(Gene,Gene,modules_NT)
for (i in 1:length(colors_NT))
kMEtable2 = cbind(kMEtable2, geneModuleMembership2[,i], MMPvalue2[,i])
colnames(kMEtable2)=colnames(kMEtable1)
write.csv(kMEtable2,"kMEtable2.csv",row.names=FALSE)
PCs2A = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_NT)
ME_2A = PCs2A$eigengenes
geneModuleMembership2 = signedKME(t(exprs_data_TP_norm_filt), ME_2A)
colnames(geneModuleMembership1)=paste("PC",colors_NT,".cor",sep="");
MMPvalue2=corPvalueStudent(as.matrix(geneModuleMembership2),dim(exprs_data_TP_norm_filt)[[2]]);
colnames(MMPvalue2)=paste("PC",colors_NT,".pval",sep="");
kMEtable2 = cbind(Gene,Gene,modules_NT)
for (i in 1:length(colors_NT))
kMEtable2 = cbind(kMEtable2, geneModuleMembership2[,i], MMPvalue2[,i])
colnames(kMEtable2)=colnames(kMEtable1)
write.csv(kMEtable2,"kMEtable2.csv",row.names=FALSE)
pdf("all_kMEtable_NT_vs_kMEtable_TP.pdf",height=8,width=8)
for (c in 1:length(colors_NT)){
verboseScatterplot(geneModuleMembership2[,c],geneModuleMembership1[,c],main=colors_NT[c],
xlab="kME in TP",ylab="kME in NT")
}
dev.off()
pdf("inModule_kMEtable_TP_vs_kMEtable_NT.pdf",height=8,width=8)
for (c in 1:length(colors_NT)){
inMod = modulesA1== colors_NT[c]
verboseScatterplot(geneModuleMembership2[inMod,c],geneModuleMembership1[inMod,c],main=colors_NT[c],
xlab="kME in A2",ylab="kME in A1")
}
dev.off()
pdf("all_kMEtable_NT_vs_kMEtable_TP.pdf",height=8,width=8)
for (c in 1:length(colors_NT)){
verboseScatterplot(geneModuleMembership2[,c],geneModuleMembership1[,c],main=colors_NT[c],
xlab="kME in TP",ylab="kME in NT")
}
dev.off()
pdf("inModule_kMEtable_TP_vs_kMEtable_NT.pdf",height=8,width=8)
for (c in 1:length(colors_NT)){
inMod = modules_NT== colors_NT[c]
verboseScatterplot(geneModuleMembership2[inMod,c],geneModuleMembership1[inMod,c],main=colors_NT[c],
xlab="kME in A2",ylab="kME in A1")
}
dev.off()
topGenesKME = NULL
for (c in 1:length(colors_NT)){
kMErank1 = rank(-geneModuleMembership1[,c])
kMErank2 = rank(-geneModuleMembership2[,c])
maxKMErank = rank(apply(cbind(kMErank1,kMErank2+.00001),1,max))
topGenesKME = cbind(topGenesKME,Gene[maxKMErank<=10])
}; colnames(topGenesKME) = colors_NT
topGenesKME
source("tutorialFunctions.R")
setwd("~/BMI567/FINAL WGCNA")
source("tutorialFunctions.R")
for (co in colors_NT[colors_NT!="grey"])
visantPrepOverall(modules_NT, co, t(exprs_data_NT_norm_filt), rownames(exprs_data_NT_norm_filt), 500, NT_softpower, TRUE)
stats[order(-stats[,2]),c(1:2)]
geneModuleMembership1
topGenesKME
stats[order(-stats[,2]),c(1:2)]
for (co in colors_NT[colors_NT!="grey"])
visantPrepOverall(modules_NT, co, t(exprs_data_TP_norm_filt), rownames(exprs_data_TP_norm_filt), 500, NT_softpower, TRUE)
dev.off()
# export TP modules
for (co in colors_NT[colors_NT!="grey"])
visantPrepOverall(modules_NT, co, t(exprs_data_TP_norm_filt), rownames(exprs_data_TP_norm_filt), 500, NT_softpower, TRUE)
common_genes
folder = "geneLists_NT/"
for (c in colorsA1){
fn = paste(folder, c, ".txt",sep="");
write.geneList(Gene[modules_NT==c], fn)
};
write(Gene,paste(folder,"all.txt",sep=""))
folder = "geneLists_NT/"
for (c in colorsA1){
fn = paste(folder, c, ".txt",sep="");
write.geneList(Gene[modules_NT==c], fn)
folder = "geneLists_NT/"
for (c in colorsA1){
write.geneList(Gene[modules_NT==c], fn)
fn = paste(folder, c, ".txt",sep="")
}
write(Gene,paste(folder,"all.txt",sep=""))
folder = "geneLists_NT/"
for (c in colors_NT){
fn = paste(folder, c, ".txt",sep="")
write.geneList(Gene[modules_NT==c], fn)
}
write(Gene,paste(folder,"all.txt",sep=""))
stats[order(-stats[,2]),c(1:2)]
topGenesKME
verboseBoxplot(as.numeric(exprs_data_NT_norm_filt["BUB1",]),
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
verboseBoxplot(as.numeric(exprs_data_NT_norm_filt["BUB1",]),g=NULL
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
verboseBoxplot(as.numeric(exprs_data_NT_norm_filt["BUB1",]),g=NULL,
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
as.numeric(exprs_data_NT_norm_filt["BUB1",]
as.numeric(exprs_data_NT_norm_filt["BUB1",])
boxplot(as.numeric(exprs_data_NT_norm_filt["BUB1",]),
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(exprs_data_NT_norm_filt["BUB1",],
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(ME_1_NT[,"MEgreen"],
main="Green ME expr. (A1) -", las=2, xlab="Region (A1)", ylab="")
boxplot(exprs_data_NT_norm_filt["BUB1",],
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(exprs_data_TP_norm_filt["BUB1",],
main="BUB1 expression TP -", las=2, xlab="TP samples", ylab="")
boxplot(ME_1_NT[,"MEdarkgreen"],
main="Green ME expr. NT -", las=2, xlab="NT samples", ylab="")
boxplot(ME_2A[,"MEdarkgreen"],
main="Green ME expr. TP -", las=2, xlab="TP samples", ylab="")
boxplot(as.numeric(ME_2A[,"MEdarkgreen"]),
main="Green ME expr. TP -", las=2, xlab="TP samples", ylab="")
ME_2A[,"MEdarkgreen"]
boxplot(exprs_data_NT_norm_filt["BUB1",],
main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(exprs_data_TP_norm_filt["BUB1",],
main="BUB1 expression TP -", las=2, xlab="TP samples", ylab="")
main="Green ME expr. NT -", las=2, xlab="NT samples", ylab="")
boxplot(ME_1_NT[,"MEdarkgreen"],
boxplot(ME_2A[,"MEdarkgreen"],
main="Green ME expr. TP -", las=2, xlab="TP samples", ylab="")
boxplot(exprs_data_NT_norm_filt["BUB1",],main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(exprs_data_NT_norm_filt["BUB1",],main="BUB1 expression NT -", las=2, xlab="NT samples", ylab="")
boxplot(exprs_data_TP_norm_filt["BUB1",],main="BUB1 expression TP -", las=2, xlab="TP samples", ylab="")
boxplot(ME_1_NT[,"MEdarkgreen"],main="Green ME expr. NT -", las=2, xlab="NT samples", ylab="")
boxplot(ME_2A[,"MEdarkgreen"],main="Green ME expr. TP -", las=2, xlab="TP samples", ylab="")
length(modules_NT)
length(colors_NT)
stats[order(-stats[,2]),c(1:2)]
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(ME_1_NT, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), cex.lab = 0.8, xLabelsAngle= 90)
dev.off()
TP_mColorh=NULL
for (ds in 0:3){
tree = cutreeHybrid(dendro = geneTree_TP, pamStage=FALSE,
minClusterSize = (30-3*ds), cutHeight = 0.99,
deepSplit = ds, distM = dissTOM_TP)
TP_mColorh=cbind(TP_mColorh,labels2colors(tree$labels));
}
pdf("TP_Module_choices.pdf", height=10,width=25);
plotDendroAndColors(geneTree_TP, TP_mColorh, paste("dpSplt =",0:3), main = "",dendroLabels=FALSE);
dev.off()
modules_TP = TP_mColorh[,4] # (Chosen based on plot below)
PCs1_TP = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_TP)
ME_1_TP = PCs1_TP$eigengenes
distPC1_TP = 1-abs(cor(ME_1_TP,use="p"))
distPC1_TP = ifelse(is.na(distPC1_TP), 0, distPC1_TP)
pcTree1_TP = hclust(as.dist(distPC1_TP),method="a")
MDS_1_TP = cmdscale(as.dist(distPC1_TP),2)
colors_TP = names(table(modules_TP))
pdf("TP_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_TP, xlab="",ylab="",main="",sub="")
plot(MDS_1_TP, col= colors_TP, main="MDS plot", cex=2, pch=19)
ordergenes_TP = geneTree_TP$order
plot.mat(scale(log(exprs_data_TP_norm_filt[ordergenes_TP,])) , rlabels= modules_TP[ordergenes_TP], clabels=
colnames(exprs_data_TP_norm_filt), rcols=modules_TP[ordergenes_TP])
for (which.module in names(table(modules_TP))){
ME = ME_1_TP[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
}
dev.off()
library(WGCNA)
PCs1_TP = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_TP)
ME_1_TP = PCs1_TP$eigengenes
distPC1_TP = 1-abs(cor(ME_1_TP,use="p"))
distPC1_TP = ifelse(is.na(distPC1_TP), 0, distPC1_TP)
pcTree1_TP = hclust(as.dist(distPC1_TP),method="a")
MDS_1_TP = cmdscale(as.dist(distPC1_TP),2)
colors_TP = names(table(modules_TP))
pdf("TP_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_TP, xlab="",ylab="",main="",sub="")
plot(MDS_1_TP, col= colors_TP, main="MDS plot", cex=2, pch=19)
ordergenes_TP = geneTree_TP$order
plot.mat(scale(log(exprs_data_TP_norm_filt[ordergenes_TP,])) , rlabels= modules_TP[ordergenes_TP], clabels=
colnames(exprs_data_TP_norm_filt), rcols=modules_TP[ordergenes_TP])
for (which.module in names(table(modules_TP))){
ME = ME_1_TP[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
}
dev.off()
PCs1_TP = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_TP)
ME_1_TP = PCs1_TP$eigengenes
distPC1_TP = 1-abs(cor(ME_1_TP,use="p"))
distPC1_TP = ifelse(is.na(distPC1_TP), 0, distPC1_TP)
pcTree1_TP = hclust(as.dist(distPC1_TP),method="a")
MDS_1_TP = cmdscale(as.dist(distPC1_TP),2)
colors_TP = names(table(modules_TP))
pdf("TP_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_TP, xlab="",ylab="",main="",sub="")
plot(MDS_1_TP, col= colors_TP, main="MDS plot", cex=2, pch=19)
ordergenes_TP = geneTree_TP$order
plotmat(scale(log(exprs_data_TP_norm_filt[ordergenes_TP,])) , rlabels= modules_TP[ordergenes_TP], clabels=
colnames(exprs_data_TP_norm_filt), rcols=modules_TP[ordergenes_TP])
for (which.module in names(table(modules_TP))){
ME = ME_1_TP[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
}
dev.off()
PCs1_TP = moduleEigengenes(t(exprs_data_TP_norm_filt), colors=modules_TP)
ME_1_TP = PCs1_TP$eigengenes
distPC1_TP = 1-abs(cor(ME_1_TP,use="p"))
distPC1_TP = ifelse(is.na(distPC1_TP), 0, distPC1_TP)
pcTree1_TP = hclust(as.dist(distPC1_TP),method="a")
MDS_1_TP = cmdscale(as.dist(distPC1_TP),2)
colors_TP = names(table(modules_TP))
pdf("TP_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_TP, xlab="",ylab="",main="",sub="")
plot(MDS_1_TP, col= colors_TP, main="MDS plot", cex=2, pch=19)
ordergenes_TP = geneTree_TP$order
plotMat(scale(log(exprs_data_TP_norm_filt[ordergenes_TP,])) , rlabels= modules_TP[ordergenes_TP], clabels=
colnames(exprs_data_TP_norm_filt), rcols=modules_TP[ordergenes_TP])
for (which.module in names(table(modules_TP))){
ME = ME_1_TP[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
}
dev.off()
PCs1_NT = moduleEigengenes(t(exprs_data_NT_norm_filt), colors=modules_NT)
ME_1_NT = PCs1_NT$eigengenes
distPC1_NT = 1-abs(cor(ME_1_NT,use="p"))
distPC1_NT = ifelse(is.na(distPC1_NT), 0, distPC1_NT)
pcTree1_NT = hclust(as.dist(distPC1_NT),method="a")
MDS_1_NT = cmdscale(as.dist(distPC1_NT),2)
colors_NT = names(table(modules_NT))
pdf("NT_ModuleEigengeneVisualizations.pdf",height=6,width=6)
par(mfrow=c(1,1), mar=c(0, 3, 1, 1) + 0.1, cex=1)
plot(pcTree1_NT, xlab="",ylab="",main="",sub="")
plot(MDS_1_NT, col= colors_NT, main="MDS plot", cex=2, pch=19)
ordergenes = geneTree_NT$order
plotMat(scale(log(exprs_data_NT_norm_filt[ordergenes,])) , rlabels= modules_NT[ordergenes], clabels=
colnames(exprs_data_NT_norm_filt), rcols=modules_NT[ordergenes])
for (which.module in names(table(modules_NT))){
ME = ME_1_NT[, paste("ME",which.module, sep="")]
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="array sample")
}
dev.off()
modulesTP_new = matchModules(Gene, modules_NT, Gene, modules_TP)
enrichments_TP_NT = userListEnrichment(Gene,modules_TP,"kMEtable_NT.csv","A1","enrichment_of_TPmods_NTmods.csv")
enrichments_TP_NT$sigOverlaps
enrichments_TP_NT = userListEnrichment(Gene,modules_TP,"kMEtable_NT.csv","TP","enrichment_of_TPmods_NTmods.csv")
enrichments_TP_NT$sigOverlaps
pdf("NT_TP_dendrogram_plots.pdf",height=5,width=15)
plotDendroAndColors(geneTree_NT, modules_NT, "NT", dendroLabels=FALSE, hang=0.03,
addGuide=TRUE, guideHang=0.05, main="NT dendrogram")
plotDendroAndColors(geneTree_TP, modulesTP_new, "TP_new", dendroLabels=FALSE, hang=0.03,
addGuide=TRUE, guideHang=0.05, main="TP dendrogram")
dev.off()
for (co in colors_TP[colors_TP!="grey"])
visantPrepOverall(modulesTP_new, co, t(exprs_data_TP_norm_filt), rownames(exprs_data_TP_norm_filt), 500, NT_softpower, TRUE)
for (co in colors_TP[colors_TP!="grey"])
visantPrepOverall(modules_TP, co, t(exprs_data_TP_norm_filt), rownames(exprs_data_TP_norm_filt), 500, NT_softpower, TRUE)
folder = "geneLists_TP/"
for (c in colors_TP){
fn = paste(folder, c, ".txt",sep="")
write.geneList(Gene[modulesTP_new==c], fn)
}
write(Gene,paste(folder,"all.txt",sep=""))
folder = "geneLists_TP/"
for (c in colors_TP){
fn = paste(folder, c, ".txt",sep="")
write.geneList(Gene[modules_TP==c], fn)
}
write(Gene,paste(folder,"all.txt",sep=""))
enrichments_TP_NT = userListEnrichment(Gene,modules_TP,"kMEtable_NT.csv","NT","enrichment_of_TPmods_NTmods.csv")
enrichments_TP_NT$sigOverlaps
sizeGrWindow(5,7.5)
par(cex = 0.9)
plotEigengeneNetworks(ME_1_NT, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2), cex.lab = 0.8, xLabelsAngle= 90)
sizeGrWindow(12,9)
#pdf(file = "NT_sampleClustering.pdf", width = 12, height = 9)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(NT_sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 1700000, col = "red")
sizeGrWindow(12,9)
#pdf(file = "TP_sampleClustering.pdf", width = 12, height = 9)
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(TP_sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
abline(h = 2500000, col = "red")
nrows(exprs_data_NT_norm)
nrow(exprs_data_NT_norm)
nrow(exprs_data_TP_norm)
nrow(exprs_data_TP_norm_filt)
nrow(exprs_data_NT_norm_filt)
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(TP_sft$fitIndices[,1], -sign(TP_sft$fitIndices[,3])*TP_sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(TP_sft$fitIndices[,1], -sign(TP_sft$fitIndices[,3])*TP_sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(TP_sft$fitIndices[,1], TP_sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(TP_sft$fitIndices[,1], TP_sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
